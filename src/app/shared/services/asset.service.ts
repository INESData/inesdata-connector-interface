/**
 * EDC REST API
 * EDC REST APIs - merged by OpenApiMerger
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, from, lastValueFrom } from 'rxjs';

import { expandArray, Asset, EDC_CONTEXT } from '@think-it-labs/edc-connector-client';
import { AssetInput,  QuerySpec } from "../models/edc-connector-entities"
import { environment } from "src/environments/environment";
import { CONTEXTS } from '../utils/app.constants';

@Injectable({
  providedIn: 'root'
})
export class AssetService {

  private readonly BASE_URL = `${environment.runtime.managementApiUrl}${environment.runtime.service.asset.baseUrl}`;

  constructor(private http: HttpClient) {
  }

  /**
   * Creates a new asset together with a data address
   * @param assetEntryDto
   */
  public createAsset(assetEntryDto: AssetInput): Observable<any> {

    let body = {
      ...assetEntryDto,
      "@context": {
        "@vocab": EDC_CONTEXT,
        "dcterms": CONTEXTS.dcterms,
        "dcat": CONTEXTS.dcat
      }
    }

    return from(lastValueFrom(this.http.post<Asset>(
      `${this.BASE_URL}`, body
    )));
  }

  /**
   * Gets an asset with the given ID
   * @param id
   */
  public getAsset(id: string): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling getAsset.');
    }

    return from(lastValueFrom(this.http.get<Asset>(
      `${this.BASE_URL}${environment.runtime.service.asset.get}${id}`
    )));
  }

  /**
   * Removes an asset with the given ID if possible. Deleting an asset is only possible if that asset is not yet referenced by a contract agreement, in which case an error is returned. DANGER ZONE: Note that deleting assets can have unexpected results, especially for contract offers that have been sent out or ongoing or contract negotiations.
   * @param id
   */
  public removeAsset(id: string): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling removeAsset.');
    }

    return from(lastValueFrom(this.http.delete<Asset>(
      `${this.BASE_URL}${environment.runtime.service.asset.get}${id}`
    )));
  }

  /**
   * Gets all assets according to a particular query
   * @param querySpec
   */
  public requestAssets(querySpec?: QuerySpec): Observable<Array<Asset>> {
    return from(lastValueFrom(this.http.post<Array<Asset>>(
      `${this.BASE_URL}${environment.runtime.service.asset.getAll}`, querySpec
    )).then(results => {
      return expandArray(results, () => new Asset());
    }));
  }
}
