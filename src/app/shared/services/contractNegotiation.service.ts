/**
 * EDC REST API
 * EDC REST APIs - merged by OpenApiMerger
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { from, lastValueFrom, Observable } from 'rxjs';
import { JSON_LD_DEFAULT_CONTEXT, QuerySpec, ContractNegotiation, ContractNegotiationState, expand, IdResponse } from '@think-it-labs/edc-connector-client';
import { ContractNegotiationRequest } from "../models/edc-connector-entities";
import { environment } from 'src/environments/environment';


@Injectable({
  providedIn: 'root'
})
export class ContractNegotiationService {

  private readonly BASE_URL = `${environment.runtime.managementApiUrl}${environment.runtime.service.contractNegotiation.baseUrl}`;

  constructor(private http: HttpClient) {
  }

  /**
   * Requests aborting the contract negotiation. Due to the asynchronous nature of contract negotiations, a successful response only indicates that the request was successfully received. Clients must poll the /{id}/state endpoint to track the state.
   * @param id
   */
  public cancelNegotiation(id: string): Observable<any> {
    let body = {
      reason: "Cancelled by DataDashboard",
      "@id": id,
      "@context": JSON_LD_DEFAULT_CONTEXT,
    }

    return from(lastValueFrom(this.http.post<ContractNegotiation>(
      `${this.BASE_URL}${environment.runtime.service.contractNegotiation.get}${id}${environment.runtime.service.contractNegotiation.terminate}`, body
    )));
  }

  /**
   * Gets an contract negotiation with the given ID
   * @param id
   */
  public getNegotiation(id: string): Observable<any> {
    return from(lastValueFrom(this.http.get<ContractNegotiation>(
      `${this.BASE_URL}${environment.runtime.service.contractNegotiation.get}${id}`
    )).then(result => {
      return expand(result, () => new ContractNegotiation());
    }));
  }

  /**
   * Gets the state of a contract negotiation with the given ID
   * @param id
   */
  public getNegotiationState(id: string): Observable<any> {
    return from(lastValueFrom(this.http.get<ContractNegotiationState>(
      `${this.BASE_URL}${id}${environment.runtime.service.contractNegotiation.state}`
    )).then(result => {
      return expand(result, () => new ContractNegotiationState());
    }));
  }

  /**
   * Initiates a contract negotiation for a given offer and with the given counter part. Please note that successfully invoking this endpoint only means that the negotiation was initiated. Clients must poll the /{id}/state endpoint to track the state
   * @param negotiationInitiateRequest
   */
  public initiateContractNegotiation(negotiationInitiateRequest: ContractNegotiationRequest): Observable<any> {
    let body = {
      ...negotiationInitiateRequest,
      "@type": 'ContractRequest',
      "@context": JSON_LD_DEFAULT_CONTEXT,
      protocol: 'dataspace-protocol-http'
    }

    return from(lastValueFrom(this.http.post<ContractNegotiationRequest>(
      `${this.BASE_URL}`, body
    )).then(result => {
      return expand(result, () => new IdResponse());
    }));
  }

  /**
   * Returns all contract negotiations according to a query
   * @param querySpec
   */
  public queryNegotiations(querySpec: QuerySpec): Observable<any> {
    let body =
      querySpec === undefined || querySpec === null || Object.keys(querySpec).length === 0
        ? null
        : {
          ...querySpec,
          "@context": JSON_LD_DEFAULT_CONTEXT,
        }

    return from(lastValueFrom(this.http.post<ContractNegotiationRequest>(
      `${this.BASE_URL}${environment.runtime.service.contractNegotiation.getAll}`, body
    )));
  }

}
